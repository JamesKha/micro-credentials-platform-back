openapi: 3.0.3
info:
  title: Untapped Energy Application
  description: >-
    An application for better support of the ongoing learning initiatives of Untapped Energy.
  version: "0.4.0"

servers:
  - url: http://localhost:5001
    description: Local host

paths:
  /:
    get:
      summary: Detect server
      description: Detect whether the server is running or not.
      responses:
        "200":
          description: Server is running.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerMessage"
        "503":
          $ref: "#/components/responses/CantConnectToDatabase"

  /auth:
    get:
      summary: Log a user in
      description: Log a user in.
      security:
        - AuthHTTPBasic: []
      responses:
        "200":
          description: >-
            User logged in.  The token in the response body is the bearer token that represents
            the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerMessage"
        "503":
          $ref: "#/components/responses/CantConnectToDatabase"

    post:
      summary: Add a new user.
      description: Add a new user to the system.
      security:
        - AuthHTTPBasic: []
      requestBody:
        description: Details of the user to be added.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationInfo"
      responses:
        "201":
          description: >-
            User successfully added.  The token in the response body is the bearer token that
            represents the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
        "403":
          description: User already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerMessage"
        "406":
          $ref: "#/components/responses/InvalidData"
        "503":
          $ref: "#/components/responses/CantConnectToDatabase"

  /user:
    get:
      summary: Return a specific user.
      description: Returns information about the user identified by the bearer token.
      security:
        - AuthHTTPBearer: []
      responses:
        "200":
          description: User information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "503":
          $ref: "#/components/responses/CantConnectToDatabase"

    patch:
      summary: Update a specific user.
      description: Update information about the user identified by the bearer token.
      requestBody:
        description: Updated details of the user.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInfo"
      security:
        - AuthHTTPBearer: []
      responses:
        "200":
          description: User successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerMessage"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "406":
          $ref: "#/components/responses/InvalidData"
        "503":
          $ref: "#/components/responses/CantConnectToDatabase"

    delete:
      summary: Delete a specific user.
      description: >-
        Removes the user identified by the bearer token from the system (as well as any related
        data).
      security:
        - AuthHTTPBearer: []
      responses:
        "200":
          description: User successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerMessage"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "503":
          $ref: "#/components/responses/CantConnectToDatabase"

components:
  securitySchemes:
    AuthHTTPBasic:
      type: http
      scheme: basic
    AuthHTTPBearer:
      type: http
      scheme: bearer

  responses:
    CantConnectToDatabase:
      description: Can"t connect to database.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServerMessage"
    InvalidData:
      description: Invalid data.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServerMessage"
    Unauthorized:
      description: Not authorized.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServerMessage"

  schemas:
    RegistrationInfo:
      type: object
      properties:
        name:
          type: string
        isInstructor:
          type: boolean
      required:
        - password
        - isInstructor

    Credential:
      type: object
      properties:
        # Naming conventions in this section comply with RFC 6749 (The OAuth 2.0 Authorization
        # Framework) which may be used later -- see
        # https://datatracker.ietf.org/doc/html/rfc6749#section-5.1

        access_token:
          type: string
        token_type:
          type: string
          enum:
            - "Bearer"
        user_info:
          $ref: "#/components/schemas/UserInfo"
      required:
        - token
        - userInfo

    UserInfo:
      type: object
      properties:
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        learnerInfo:
          $ref: "#/components/schemas/LearnerInfo"
        instructorInfo:
          $ref: "#/components/schemas/InstructorInfo"
      required:
        - name
        - email
        - learnerInfo

    LearnerInfo:
      type: object
      nullable: true

    InstructorInfo:
      type: object
      nullable: true

    ServerMessage:
      type: object
      properties:
        msg:
          type: string
      required:
        - msg
